from aiogram import types
from dispatcher import dp
import config
import re
from bot import BotDB
from keyboards import main_keyboard, ikb_e, ikb_s
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.dispatcher import FSMContext
from aiogram.utils.callback_data import CallbackData


"""
TO DO:
    –°–î–ï–õ–ê–¢–¨ –í–°–ï –ë–ê–ó–û–í–´–ï –§–£–ù–ö–¶–ò–ò, –ó–ê–ë–ò–ù–î–ò–¢–¨ –í–°–ï –ö–ù–û–ü–ö–ò - DONE
    –†–ê–ó–û–ë–†–ê–¢–¨–°–Ø –í –û–°–¢–ê–õ–¨–ù–´–• –§–ê–ô–õ–ê–• –í –ü–†–û–ï–ö–¢–ï - ALMOST
    –î–û–ë–ê–í–ò–¢–¨ –ò–°–¢–û–ß–ù–ò–ö–ò –î–û–•–û–î–ê –ò –°–¢–ê–¢–¨–ò –†–ê–°–•–û–î–ê:
        —Å–ø–∏—Å–æ–∫ –¥–æ–ª–∂–µ–Ω –æ—Ç–∫—Ä—ã–≤–∞—Ç—å—Å—è –ø–æ—Å–ª–µ –∫–Ω–æ–ø–∫–∏ earned –∏–ª–∏ spent, –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø—É–Ω–∫—Ç –≤ —Å–ø–∏—Å–∫–µ –¥–æ–ª–∂–µ–Ω –ø–æ–∑–≤–æ–ª—è—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –∏–ª–∏ —Å—Ç–∞—Ç—å–∏
        1. –¥–æ–±–∞–≤–∏—Ç—å —Å—Ç–æ–ª–±—Ü—ã –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ –æ–±–µ —Ç–∞–±–ª–∏—Ü—ã - DONE
        2. –í–†–ï–ú–ï–ù–ù–û. —Å–¥–µ–ª–∞—Ç—å –∑–∞–ø–∏—Å—å —Ç–µ—Å—Ç–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –∏–Ω–∞—á–µ –±–æ—Ç –Ω–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å. - DONE
        3. –¥–æ–±–∞–≤–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏, –ø–µ—Ä–µ–ø–∏—Å–∞—Ç—å –ª–æ–≥–∏–∫—É —Ç–∞–∫, —á—Ç–æ–±—ã —Å–Ω–∞—á–∞–ª–∞ –æ—Ç–∫—Ä—ã–≤–∞–ª–∞—Å—å –æ–Ω–∞ –∏ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–æ–∂–Ω–æ –±—ã–ª–æ –≤–≤–µ—Å—Ç–∏ —Å—É–º–º—É - DONE
        4. –ø—Ä–æ–ø–∏—Å–∞—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–æ–±–∞–≤–ª—è—Ç—å —Å–≤–æ–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        5. –ø—Ä–∏ –≤—ã–≤–æ–¥–µ –∏—Å—Ç–æ—Ä–∏–∏ –¥–æ–ª–∂–Ω—ã –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å—Å—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –∑–∞–ø–∏—Å–∏ –ø–æ –∫–æ—Ç–æ—Ä—ã–º –∏ –±—É–¥—É—Ç –≤—ã–≤–æ–¥–∏—Ç—å—Å—è. –ù–æ —Ç–∞–∫–∂–µ –æ—Å—Ç–∞–≤–∏—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—ã–≤–æ–¥–∏—Ç—å –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é.
    –î–û–ë–ê–í–ò–¢–¨ –ù–ï–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û–ï –û–ü–ò–°–ê–ù–ò–ï –ó–ê–ü–ò–°–ò. –ü-–õ–¨ –ú–û–ñ–ï–¢ –î–ê–¢–¨ –û–ü–ò–°–ê–ù–ò–ï, –ê –ú–û–ñ–ï–¢ –ù–ï –î–ê–í–ê–¢–¨.
"""


class States(StatesGroup):

    input_money = State()
    input_date = State()


operation = True  # –û—Ç–¥–µ–ª—è–µ—Ç —Ä–∞—Å—Ö–æ–¥ –æ—Ç –¥–æ—Ö–æ–¥–∞. True = –¥–æ—Ö–æ–¥, False = —Ä–∞—Å—Ö–æ–¥.
category = ''  # –ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ—Ö–æ–¥–∞ –∏–ª–∏ —Ä–∞—Å—Ö–æ–¥–∞


@dp.message_handler(commands="start")
async def start(message: types.Message):
    if (not BotDB.user_exists(message.from_user.id)):
        BotDB.add_user(message.from_user.id)

    await message.bot.send_message(message.from_user.id, "Welcome!", reply_markup=main_keyboard)


@dp.message_handler(commands=("earned", "spent"))
async def note(message: types.Message, state: FSMContext) -> None:
    global operation
    if message.text == "/earned":
        operation = True
        await message.bot.send_message(message.from_user.id, "Select an income category", reply_markup=ikb_e)
    elif message.text == "/spent":
        operation = False
        await message.bot.send_message(message.from_user.id, "Select a spending category", reply_markup=ikb_s)


@dp.callback_query_handler()
async def vote_callback(callback: types.CallbackQuery):
    if callback.data != 'exit':
        global category
        category = callback.data
        await callback.bot.send_message(chat_id=callback.message.chat.id, text='Enter the amount')
        await States.input_money.set()
    await callback.message.delete()


@dp.message_handler(state=States.input_money)
async def load_note(message: types.Message, state: FSMContext) -> None:
    value = message.text.replace(',', '.')
    try:
        float(value)
    except ValueError:
        await message.reply('You must enter a number')
    else:
        if float(value) >= 0.01:
            if len(value) < 13:  # –ú–æ–∂–Ω–æ –±—ã–ª–æ –¥–æ–±–∞–≤–∏—Ç—å —á–µ—Ä–µ–∑ and –≤—ã—à–µ, –Ω–æ –ø—Ä–∏—à–ª–æ—Å—å –±—ã –ø–∏—Å–∞—Ç—å –æ–± —ç—Ç–æ–º –≤ –æ—à–∏–±–∫–µ, –º–∞–ª–æ –∫—Ç–æ –±—É–¥–µ—Ç –≤–≤–æ–¥–∏—Ç—å –≥–∏–≥–∞–Ω—Ç—Å–∫–∏–µ —á–∏—Å–ª–∞
                if operation:
                    BotDB.add_income(message.from_user.id, value, category)
                    await message.answer(f'Nice, you earned {value} money\nIncome is recorded')
                    await state.finish()
                if not operation:
                    BotDB.add_cost(message.from_user.id, value, category)
                    await message.answer(f'Spending {value} money is recorded')
                    await state.finish()
            else:
                await message.reply('–ù–µ–ø–ª–æ—Ö–æ...\n–ù–æ —è –Ω–µ –ø–æ–≤–µ—Ä—é —á—Ç–æ —Ç—ã –æ–ø–µ—Ä–∏—Ä—É–µ—à—å —Ç–∞–∫–∏–º–∏ —Å—É–º–º–∞–º–∏)')
        else:
            await message.reply('–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ –º–µ–Ω—å—à–µ 0.01 ‚ÇΩ')


@dp.message_handler(commands="balance")
async def balance(message: types.Message, state: FSMContext) -> None:
    balance = BotDB.get_balance(user_id=message.from_user.id)
    await message.answer(f'Current balance is: {round(balance, 2)} ‚ÇΩ')


@dp.message_handler(commands="history")
async def history(message: types.Message, state: FSMContext) -> None:
    await message.bot.send_message(message.from_user.id, "Enter the number of days for which the transaction history is needed")
    await States.input_date.set()


@dp.message_handler(state=States.input_date)  # –ù–µ –ø–æ–º–µ—à–∞–ª–∞ –±—ã —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–µ –∏ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –≤—Å–µ–≥–æ —Å–ø–∏—Å–∫–∞, –∞ –Ω–µ –¥–ª—è –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏.
async def load_history(message: types.Message, state: FSMContext) -> None:
    period = message.text
    try:
        int(period)
    except ValueError:
        await message.reply('You must enter a number')
    else:
        if int(period) <= 0:
            await message.reply('The number of days must be greater than zero')
        else:
            history = BotDB.get_history(period, user_id=message.from_user.id)
            await message.answer(history)
            await state.finish()

# –°–¢–ê–†–´–ï –ú–ï–¢–û–î–´
# @dp.message_handler(commands=("s", "e"), commands_prefix="/!")
# async def start(message: types.Message):
#     cmd_variants = (('/spent', '/s'), ('/earned', '/e'))
#     operation = '-' if message.text.startswith(cmd_variants[0]) else '+'
#
#     # —É–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è, –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å–∞–º—É —Å—É–º–º—É
#     value = message.text
#     for command in cmd_variants:
#         for j in command:
#             value = value.replace(j, '').strip()
#
#     # —É–±–∏—Ä–∞–µ–º –≤—Å–µ –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã –∏–∑ —Å—É–º–º—ã, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã
#     if(len(value)):
#         x = re.findall(r"\d+(?:.\d+)?", value)
#         if(len(x)):
#             value = float(x[0].replace(',', '.'))
#
#             BotDB.add_record(message.from_user.id, operation, value)
#
#             if operation == '-':
#                 await message.reply("‚úÖ –ó–∞–ø–∏—Å—å –æ <u><b>—Ä–∞—Å—Ö–æ–¥–µ</b></u> —É—Å–ø–µ—à–Ω–æ –≤–Ω–µ—Å–µ–Ω–∞!")
#             else:
#                 await message.reply("‚úÖ –ó–∞–ø–∏—Å—å –æ <u><b>–¥–æ—Ö–æ–¥–µ</b></u> —É—Å–ø–µ—à–Ω–æ –≤–Ω–µ—Å–µ–Ω–∞!")
#         else:
#             await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—É–º–º—É!")
#     else:
#         await message.reply("–ù–µ –≤–≤–µ–¥–µ–Ω–∞ —Å—É–º–º–∞!")

# @dp.message_handler(commands = ("history", "h"), commands_prefix = "/!")
# async def start(message: types.Message):
#     cmd_variants = ('/history', '/h', '!history', '!h')
#     within_als = {
#         "day": ('today', 'day', '—Å–µ–≥–æ–¥–Ω—è', '–¥–µ–Ω—å'),
#         "month": ('month', '–º–µ—Å—è—Ü'),
#         "year": ('year', '–≥–æ–¥'),
#     }
#
#     cmd = message.text
#     for r in cmd_variants:
#         cmd = cmd.replace(r, '').strip()
#
#     within = 'day'
#     if(len(cmd)):
#         for k in within_als:
#             for als in within_als[k]:
#                 if(als == cmd):
#                     within = k
#     print(within)
#
#     records = BotDB.get_records(message.from_user.id, within)
#
#     if len(records):
#         answer = f"üïò –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π –∑–∞ {within_als[within][-1]}\n\n"
#
#         for r in records:
#             answer += "<b>" + ("‚ûñ –†–∞—Å—Ö–æ–¥" if not r[2] else "‚ûï –î–æ—Ö–æ–¥") + "</b>"
#             answer += f" - {r[3]}"
#             answer += f" <i>({r[4]})</i>\n"
#
#         await message.reply(answer)
#     else:
#         await message.reply("–ó–∞–ø–∏—Å–µ–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ!")
